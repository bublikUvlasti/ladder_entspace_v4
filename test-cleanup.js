// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä
const fetch = require('node-fetch');

async function testCleanup() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä...');
    
    const response = await fetch('http://localhost:3000/api/game/cleanup', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const data = await response.json();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:', data);
    
    if (data.cleaned > 0) {
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${data.cleaned} —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä:`);
      data.games.forEach(game => {
        console.log(`  - ${game.code} (${game.playerName}) - —Å–æ–∑–¥–∞–Ω–∞ ${new Date(game.createdAt).toLocaleString('ru-RU')}`);
      });
    } else {
      console.log('‚ú® –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testCleanup(); 