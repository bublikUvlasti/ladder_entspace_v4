const { PrismaClient } = require('@prisma/client');
const io = require('socket.io-client');

const prisma = new PrismaClient();

async function testAutoRedirect() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã');
    
    try {
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        const user1 = await prisma.user.upsert({
            where: { name: 'testuser1' },
            update: {},
            create: {
                name: 'testuser1',
                email: 'testuser1@test.com',
                password: 'hashedpassword',
                userType: 'STUDENT'
            }
        });

        const user2 = await prisma.user.upsert({
            where: { name: 'testuser2' },
            update: {},
            create: {
                name: 'testuser2',
                email: 'testuser2@test.com',
                password: 'hashedpassword',
                userType: 'STUDENT'
            }
        });

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:', user1.name, user2.name);

        // 2. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∏–≥—Ä—ã...');
        
        const game = await prisma.game.create({
            data: {
                code: 'TEST123',
                status: 'FINISHED',
                ballPosition: 2,
                balance1: 0,
                balance2: 100,
                move1: 5,
                move2: 10,
                round: 3,
                player1Id: user1.id,
                player2Id: user2.id,
                winnerId: user2.id,
                finishedAt: new Date()
            }
        });

        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', game.code, '–°—Ç–∞—Ç—É—Å:', game.status);

        // 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É...');
        
        const socket1 = io('http://localhost:3001');
        
        return new Promise((resolve, reject) => {
            let testCompleted = false;
            const timeout = setTimeout(() => {
                if (!testCompleted) {
                    testCompleted = true;
                    console.log('‚è∞ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
                    socket1.disconnect();
                    resolve();
                }
            }, 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

            socket1.on('connect', () => {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');
                
                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è
                socket1.emit('authenticate', { userId: user1.id });
            });

            socket1.on('authenticated', (data) => {
                console.log('üë§ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫:', data.user.name);
                
                // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∏–≥—Ä–µ
                socket1.emit('joinGame', { code: 'TEST123' });
            });

            socket1.on('gameUpdated', (gameData) => {
                console.log('üéÆ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã:', {
                    code: gameData.code,
                    status: gameData.status,
                    winner: gameData.winner?.name || '–Ω–µ—Ç'
                });

                if (gameData.status === 'FINISHED' && !testCompleted) {
                    testCompleted = true;
                    console.log('üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—Ç–∞—Ç—É—Å FINISHED –ø–æ–ª—É—á–µ–Ω');
                    console.log('üéØ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω - –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å FINISHED');
                    console.log('üí° –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–µ–π—á–∞—Å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è 7-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä');
                    
                    clearTimeout(timeout);
                    socket1.disconnect();
                    resolve();
                }
            });

            socket1.on('gameFinished', (data) => {
                console.log('üèÜ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ gameFinished:', data);
                
                if (!testCompleted) {
                    testCompleted = true;
                    console.log('üéØ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω - –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ gameFinished');
                    console.log('üí° –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å–µ–π—á–∞—Å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è 7-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ç–∞–π–º–µ—Ä');
                    
                    clearTimeout(timeout);
                    socket1.disconnect();
                    resolve();
                }
            });

            socket1.on('error', (error) => {
                console.log('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
            });

            socket1.on('disconnect', () => {
                console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞');
            });
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    } finally {
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            await prisma.game.deleteMany({
                where: { code: 'TEST123' }
            });
            
            await prisma.user.deleteMany({
                where: {
                    name: { in: ['testuser1', 'testuser2'] }
                }
            });
            
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        } catch (cleanupError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', cleanupError);
        }
        
        await prisma.$disconnect();
        console.log('üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAutoRedirect().catch(console.error); 