'use client';
import React, { createContext, useContext, useEffect, useState, useRef } from 'react';
import { io, Socket } from 'socket.io-client';
import type { GameEvent, GameSession, Player } from './types';

interface SocketContextType {
  socket: Socket | null;
  connected: boolean;
  authenticated: boolean;
  user: Player | null;
  currentGame: GameSession | null;
  gameEvents: GameEvent[];
  createGame: () => void;
  joinGame: (code: string) => void;
  joinGameByCode: (code: string) => void;
  makeMove: (code: string, move: number) => void;
  clearEvents: () => void;
  setCurrentGame: (game: GameSession | null) => void;
}

const SocketContext = createContext<SocketContextType | null>(null);

export function SocketProvider({ children, userId }: { children: React.ReactNode; userId?: string }) {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [connected, setConnected] = useState(false);
  const [authenticated, setAuthenticated] = useState(false);
  const [user, setUser] = useState<Player | null>(null);
  const [currentGame, setCurrentGame] = useState<GameSession | null>(null);
  const [gameEvents, setGameEvents] = useState<GameEvent[]>([]);
  const socketRef = useRef<Socket | null>(null);
  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    if (!userId) {
      // –ï—Å–ª–∏ –Ω–µ—Ç userId, –æ—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (socketRef.current) {
        socketRef.current.close();
        socketRef.current = null;
        setSocket(null);
        setConnected(false);
        setAuthenticated(false);
        setUser(null);
      }
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    if (socketRef.current && socketRef.current.connected) {
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    const isProduction = process.env.NODE_ENV === 'production';
    const websocketUrl = isProduction 
      ? `${window.location.protocol}//${window.location.host}`
      : 'http://localhost:3001';

    console.log('üîß SocketProvider connecting to:', websocketUrl);
    console.log('üîß Environment:', process.env.NODE_ENV);
    console.log('üîß Is production:', isProduction);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
    const newSocket = io(websocketUrl, {
      transports: ['websocket', 'polling'],
      autoConnect: true,
      forceNew: false, // –ù–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      timeout: 20000
    });

    console.log('üîß SocketProvider instance created');

    socketRef.current = newSocket;
    setSocket(newSocket);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('connect', () => {
      console.log('üîå SocketProvider connected to game server');
      setConnected(true);
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è
      newSocket.emit('authenticate', { userId });
    });

    newSocket.on('disconnect', () => {
      console.log('üîå SocketProvider disconnected from game server');
      setConnected(false);
      setAuthenticated(false);
      
      // –û—á–∏—â–∞–µ–º heartbeat –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      if (heartbeatIntervalRef.current) {
        clearInterval(heartbeatIntervalRef.current);
        heartbeatIntervalRef.current = null;
      }
    });

    newSocket.on('authenticated', (data: { user: Player }) => {
      console.log('üë§ SocketProvider authenticated:', data.user);
      setAuthenticated(true);
      setUser(data.user);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      startHeartbeat(newSocket);
    });

    // Heartbeat acknowledgment
    newSocket.on('heartbeat_ack', () => {
      // Heartbeat –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º
    });

    // –ò–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    newSocket.on('gameCreated', (data: { code: string; game: GameSession }) => {
      console.log('üéÆ SocketProvider game created event received:', data);
      setCurrentGame(data.game);
      addGameEvent(`–ò–≥—Ä–∞ ${data.code} —Å–æ–∑–¥–∞–Ω–∞!`);
    });

    newSocket.on('gameUpdated', (game: GameSession) => {
      console.log('üéÆ SocketProvider game updated:', game);
      console.log('üéÆ Game status:', game.status, 'Winner:', game.winner);
      setCurrentGame(game);
    });

    newSocket.on('gameStarted', (data: { message: string }) => {
      console.log('üéÆ SocketProvider game started:', data);
      addGameEvent(data.message);
    });

    newSocket.on('moveReceived', (data: { player: string; move: number }) => {
      console.log('üéØ SocketProvider move received:', data);
      addGameEvent(`${data.player === 'player1' ? '–ò–≥—Ä–æ–∫ 1' : '–ò–≥—Ä–æ–∫ 2'} —Å–¥–µ–ª–∞–ª —Ö–æ–¥: ${data.move}`);
    });

    newSocket.on('roundResult', (data: { ballPosition: number; balance1: number; balance2: number }) => {
      console.log('üèÅ SocketProvider round result:', data);
      addGameEvent(`–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∑–∏—Ü–∏—è –º—è—á–∞: ${data.ballPosition}`);
      addGameEvent(`–ë–∞–ª–∞–Ω—Å 1: ${data.balance1}, –ë–∞–ª–∞–Ω—Å 2: ${data.balance2}`);
    });

    newSocket.on('gameFinished', (data: { winner?: Player }) => {
      console.log('üèÜ SocketProvider game finished:', data);
      console.log('üèÜ Current game before finish:', currentGame);
      addGameEvent(`–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${data.winner?.name || '–ù–∏—á—å—è'}`);
      
      // –ù–ï –æ—á–∏—â–∞–µ–º currentGame –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø—É—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      console.log('üèÜ Game finished event processed, currentGame should remain');
    });

    newSocket.on('error', (error: any) => {
      console.log('‚ùå SocketProvider error received:', error);
      
      if (error && (error.message || Object.keys(error).length > 0)) {
        const errorMessage = typeof error === 'object' && error?.message ? error.message : 'Unknown error';
        addGameEvent(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      }
    });

    newSocket.on('connect_error', (error: any) => {
      console.error('‚ùå SocketProvider connection error:', error);
      addGameEvent(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message || 'Connection failed'}`);
    });

    // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–º
    return () => {
      // –¢–æ–ª—å–∫–æ –æ—á–∏—â–∞–µ–º heartbeat, –Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (heartbeatIntervalRef.current) {
        clearInterval(heartbeatIntervalRef.current);
        heartbeatIntervalRef.current = null;
      }
    };
  }, [userId]);

  // –ó–∞–ø—É—Å–∫ heartbeat
  const startHeartbeat = (socket: Socket) => {
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
    }
    
    heartbeatIntervalRef.current = setInterval(() => {
      if (socket.connected) {
        socket.emit('heartbeat');
      }
    }, 60 * 1000);
    
    console.log('üíì SocketProvider heartbeat started');
  };

  const addGameEvent = (message: string) => {
    setGameEvents(prev => [...prev, {
      id: Date.now() + Math.random(),
      message,
      timestamp: new Date()
    }]);
  };

  const createGame = () => {
    console.log('üéÆ SocketProvider createGame called');
    
    if (socket && authenticated) {
      console.log('üéÆ SocketProvider emitting createGame event...');
      socket.emit('createGame');
    } else {
      console.log('‚ùå SocketProvider cannot create game - socket or authentication missing');
    }
  };

  const joinGame = (code: string) => {
    if (socket && authenticated) {
      socket.emit('joinGame', { code });
    }
  };

  const joinGameByCode = (code: string) => {
    if (socket && authenticated) {
      socket.emit('joinGame', { code });
    }
  };

  const makeMove = (code: string, move: number) => {
    if (socket && authenticated) {
      socket.emit('makeMove', { code, move });
    }
  };

  const clearEvents = () => {
    setGameEvents([]);
  };

  const contextValue: SocketContextType = {
    socket,
    connected,
    authenticated,
    user,
    currentGame,
    gameEvents,
    createGame,
    joinGame,
    joinGameByCode,
    makeMove,
    clearEvents,
    setCurrentGame
  };

  return (
    <SocketContext.Provider value={contextValue}>
      {children}
    </SocketContext.Provider>
  );
}

export function useSocketContext() {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error('useSocketContext must be used within a SocketProvider');
  }
  return context;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã)
export function closeGlobalSocket() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  if (typeof window !== 'undefined') {
    const socketInstance = (window as any).__globalSocket;
    if (socketInstance) {
      socketInstance.close();
      (window as any).__globalSocket = null;
    }
  }
} 