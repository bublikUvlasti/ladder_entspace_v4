const { Server } = require('socket.io');
const { createServer } = require('http');
const { PrismaClient } = require('./app/generated/prisma');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('./lib/env');

const prisma = new PrismaClient();

class GameServer {
  constructor() {
    this.httpServer = createServer();
    this.io = new Server(this.httpServer, {
      cors: {
        origin: process.env.NODE_ENV === 'production' 
          ? [process.env.NEXTAUTH_URL, process.env.FRONTEND_URL].filter(Boolean)
          : "*",
        methods: ["GET", "POST"],
        credentials: true
      }
    });
    
    this.games = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –≤ –ø–∞–º—è—Ç–∏
    this.userSockets = new Map(); // –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Å–æ–∫–µ—Ç
    
    this.setupSocketHandlers();
  }

  setupSocketHandlers() {
    this.io.on('connection', (socket) => {
      console.log(`üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.id}`);

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.on('authenticate', async (data) => {
        try {
          const { userId } = data;
          if (!userId) {
            socket.emit('error', { message: 'User ID required' });
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
          const user = await prisma.user.findUnique({
            where: { id: userId }
          });

          if (!user) {
            socket.emit('error', { message: 'User not found' });
            return;
          }

          socket.userId = userId;
          socket.userName = user.name;
          this.userSockets.set(userId, socket);
          
          socket.emit('authenticated', { user: { id: user.id, name: user.name, wins: user.wins } });
          console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.name} (${userId})`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
          socket.emit('error', { message: 'Authentication failed' });
        }
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
      socket.on('createGame', async () => {
        try {
          if (!socket.userId) {
            socket.emit('error', { message: 'Not authenticated' });
            return;
          }

          const gameCode = this.generateGameCode();
          
          // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const game = await prisma.game.create({
            data: {
              code: gameCode,
              player1Id: socket.userId,
              status: 'WAITING'
            },
            include: {
              player1: { select: { id: true, name: true, wins: true } },
              player2: { select: { id: true, name: true, wins: true } }
            }
          });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –ø–∞–º—è—Ç–∏
          this.games.set(gameCode, {
            ...game,
            sockets: { player1: socket }
          });

          socket.join(`game_${gameCode}`);
          socket.emit('gameCreated', { 
            code: gameCode, 
            game: this.sanitizeGameData(game) 
          });
          
          console.log(`üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: ${gameCode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${socket.userName}`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
          socket.emit('error', { message: 'Failed to create game' });
        }
      });

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
      socket.on('joinGame', async (data) => {
        try {
          const { code } = data;
          if (!socket.userId || !code) {
            socket.emit('error', { message: 'Invalid request' });
            return;
          }

          console.log(`üîç –ò–≥—Ä–æ–∫ ${socket.userName} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ${code}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          let game = await prisma.game.findUnique({
            where: { code },
            include: {
              player1: { select: { id: true, name: true, wins: true } },
              player2: { select: { id: true, name: true, wins: true } }
            }
          });

          if (!game) {
            socket.emit('error', { message: 'Game not found' });
            return;
          }

          // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ
          if (game.player1Id === socket.userId) {
            socket.join(`game_${code}`);
            socket.emit('gameUpdated', this.sanitizeGameData(game));
            console.log(`üéÆ –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã ${socket.userName} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${code}`);
            return;
          }

          // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ
          if (game.player2Id === socket.userId) {
            socket.join(`game_${code}`);
            socket.emit('gameUpdated', this.sanitizeGameData(game));
            console.log(`üéÆ –ò–≥—Ä–æ–∫ 2 ${socket.userName} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${code}`);
            return;
          }

          if (game.status !== 'WAITING') {
            socket.emit('error', { message: 'Game is not available for joining' });
            return;
          }

          if (game.player2Id) {
            socket.emit('error', { message: 'Game is full' });
            return;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          game = await prisma.game.update({
            where: { id: game.id },
            data: {
              player2Id: socket.userId,
              status: 'IN_PROGRESS'
            },
            include: {
              player1: { select: { id: true, name: true, wins: true } },
              player2: { select: { id: true, name: true, wins: true } }
            }
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –ø–∞–º—è—Ç–∏
          const gameInMemory = this.games.get(code) || {};
          this.games.set(code, {
            ...game,
            sockets: {
              ...gameInMemory.sockets,
              player2: socket
            }
          });

          socket.join(`game_${code}`);
          
          // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ –≤—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫—É
          socket.emit('gameUpdated', this.sanitizeGameData(game));
          
          // –ó–∞—Ç–µ–º —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ä—Ç–µ
          this.io.to(`game_${code}`).emit('gameUpdated', this.sanitizeGameData(game));
          this.io.to(`game_${code}`).emit('gameStarted', { message: '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!' });
          
          console.log(`üéÆ –ò–≥—Ä–æ–∫ ${socket.userName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${code}`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ:', error);
          socket.emit('error', { message: 'Failed to join game' });
        }
      });

      // –ò–≥—Ä–æ–≤–æ–π —Ö–æ–¥
      socket.on('makeMove', async (data) => {
        try {
          const { code, move } = data;
          if (!socket.userId || !code || typeof move !== 'number') {
            socket.emit('error', { message: 'Invalid move data' });
            return;
          }

          const game = this.games.get(code);
          if (!game) {
            socket.emit('error', { message: 'Game not found' });
            return;
          }

          if (game.status !== 'IN_PROGRESS') {
            socket.emit('error', { message: 'Game is not active' });
            return;
          }

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Ö–æ–¥
          const isPlayer1 = game.player1Id === socket.userId;
          const isPlayer2 = game.player2Id === socket.userId;

          if (!isPlayer1 && !isPlayer2) {
            socket.emit('error', { message: 'You are not a player in this game' });
            return;
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ–¥
          const updateData = {};
          if (isPlayer1) updateData.move1 = move;
          if (isPlayer2) updateData.move2 = move;

          const updatedGame = await prisma.game.update({
            where: { id: game.id },
            data: updateData,
            include: {
              player1: { select: { id: true, name: true, wins: true } },
              player2: { select: { id: true, name: true, wins: true } }
            }
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –ø–∞–º—è—Ç–∏
          this.games.set(code, { ...this.games.get(code), ...updatedGame });

          // –ï—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥
          if (updatedGame.move1 !== null && updatedGame.move2 !== null) {
            await this.processGameRound(code, updatedGame);
          } else {
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ö–æ–¥–µ
            this.io.to(`game_${code}`).emit('gameUpdated', this.sanitizeGameData(updatedGame));
            this.io.to(`game_${code}`).emit('moveReceived', {
              player: isPlayer1 ? 'player1' : 'player2',
              move: move
            });
          }

          console.log(`üéØ –•–æ–¥ –≤ –∏–≥—Ä–µ ${code}: ${socket.userName} -> ${move}`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–æ–¥–∞:', error);
          socket.emit('error', { message: 'Failed to make move' });
        }
      });

      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
      socket.on('disconnect', async () => {
        console.log(`üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${socket.id}`);
        if (socket.userId) {
          // –û—á–∏—â–∞–µ–º –∏–≥—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ WAITING, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          await this.cleanupUserWaitingGames(socket.userId, socket.userName);
          this.userSockets.delete(socket.userId);
        }
      });

      // Heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      socket.on('heartbeat', () => {
        socket.lastHeartbeat = Date.now();
        socket.emit('heartbeat_ack');
      });

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º heartbeat –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      socket.lastHeartbeat = Date.now();
    });
  }

  async processGameRound(code, game) {
    try {
      const move1 = game.move1;
      const move2 = game.move2;
      
      // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–∫–∞–º–µ–Ω—å –¥–≤–∏–∂–µ—Ç—Å—è –Ω–∞ 1 –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –∫—Ç–æ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–∞–≤–∏–ª)
      let newBallPosition = game.ballPosition;
      let newBalance1 = game.balance1;
      let newBalance2 = game.balance2;

      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∫—Ç–æ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–∞–≤–∏–ª, —Ç–æ—Ç —Ç–æ–ª–∫–∞–µ—Ç –∫–∞–º–µ–Ω—å –≤ —Å–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É –Ω–∞ 1 –ø–æ–∑–∏—Ü–∏—é
      if (move1 > move2) {
        // Player 1 –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ - –∫–∞–º–µ–Ω—å –¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–ª–µ–≤–æ (–ø–æ–∑–∏—Ü–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è)
        newBallPosition -= 1;
      } else if (move2 > move1) {
        // Player 2 –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ–ª—å—à–µ - –∫–∞–º–µ–Ω—å –¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ (–ø–æ–∑–∏—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è)
        newBallPosition += 1;
      }
      // –ï—Å–ª–∏ —Ä–∞–≤–Ω–æ, –∫–∞–º–µ–Ω—å –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–Ω—è: -2, -1, 0, 1, 2
      newBallPosition = Math.max(-2, Math.min(2, newBallPosition));

      // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–æ–¥–æ–≤
      newBalance1 = Math.max(0, newBalance1 - Math.abs(move1));
      newBalance2 = Math.max(0, newBalance2 - Math.abs(move2));

      let gameStatus = 'IN_PROGRESS';
      let winnerId = null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
      if (newBallPosition <= -2) {
        // Player 1 wins - –∫–∞–º–µ–Ω—å –¥–æ—Å—Ç–∏–≥ –ø–æ–∑–∏—Ü–∏–∏ -2 (–ª–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
        gameStatus = 'FINISHED';
        winnerId = game.player1Id;
      } else if (newBallPosition >= 2) {
        // Player 2 wins - –∫–∞–º–µ–Ω—å –¥–æ—Å—Ç–∏–≥ –ø–æ–∑–∏—Ü–∏–∏ +2 (–ø—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
        gameStatus = 'FINISHED';
        winnerId = game.player2Id;
      } else if (newBalance1 <= 0 && newBalance2 <= 0) {
        // Both players out of stones - winner is who has stone closer to their side
        gameStatus = 'FINISHED';
        if (newBallPosition < 0) {
          // –ö–∞–º–µ–Ω—å –±–ª–∏–∂–µ –∫ –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ - –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –ª–µ–≤—ã–π –∏–≥—Ä–æ–∫
          winnerId = game.player1Id;
        } else if (newBallPosition > 0) {
          // –ö–∞–º–µ–Ω—å –±–ª–∏–∂–µ –∫ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ - –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –ø—Ä–∞–≤—ã–π –∏–≥—Ä–æ–∫
          winnerId = game.player2Id;
        }
        // If position is 0, it's a draw (no winner)
      } else if (newBalance1 <= 0) {
        gameStatus = 'FINISHED';
        winnerId = game.player2Id;
      } else if (newBalance2 <= 0) {
        gameStatus = 'FINISHED';
        winnerId = game.player1Id;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const updatedGame = await prisma.game.update({
        where: { id: game.id },
        data: {
          ballPosition: newBallPosition,
          balance1: newBalance1,
          balance2: newBalance2,
          move1: null, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ö–æ–¥—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
          move2: null,
          status: gameStatus,
          winnerId: winnerId
        },
        include: {
          player1: { select: { id: true, name: true, wins: true } },
          player2: { select: { id: true, name: true, wins: true } },
          winner: { select: { id: true, name: true } }
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –ø–∞–º—è—Ç–∏
      this.games.set(code, { ...this.games.get(code), ...updatedGame });

      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      if (gameStatus === 'FINISHED' && winnerId) {
        await prisma.user.update({
          where: { id: winnerId },
          data: { wins: { increment: 1 } }
        });
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—É–Ω–¥–∞
      this.io.to(`game_${code}`).emit('gameUpdated', this.sanitizeGameData(updatedGame));
      this.io.to(`game_${code}`).emit('roundResult', {
        move1,
        move2,
        ballPosition: newBallPosition,
        balance1: newBalance1,
        balance2: newBalance2,
        gameStatus,
        winner: winnerId ? updatedGame.winner : null
      });

      if (gameStatus === 'FINISHED') {
        this.io.to(`game_${code}`).emit('gameFinished', {
          winner: updatedGame.winner,
          finalPosition: newBallPosition
        });
        console.log(`üèÜ –ò–≥—Ä–∞ ${code} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${updatedGame.winner?.name || '–ù–∏—á—å—è'}`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—É–Ω–¥–∞:', error);
      this.io.to(`game_${code}`).emit('error', { message: 'Failed to process round' });
    }
  }

  generateGameCode() {
    return Math.random().toString(36).substr(2, 6).toUpperCase();
  }

  sanitizeGameData(game) {
    return {
      id: game.id,
      code: game.code,
      status: game.status,
      ballPosition: game.ballPosition,
      balance1: game.balance1,
      balance2: game.balance2,
      move1: game.move1,
      move2: game.move2,
      player1: game.player1,
      player2: game.player2,
      player1Id: game.player1Id,
      player2Id: game.player2Id,
      winner: game.winner,
      createdAt: game.createdAt,
      updatedAt: game.updatedAt
    };
  }

  start(port = 3001) {
    this.httpServer.listen(port, () => {
      console.log(`üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      setInterval(() => {
        this.cleanupOldGames();
      }, 5 * 60 * 1000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º heartbeat –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
      setInterval(() => {
        this.checkHeartbeats();
      }, 60 * 1000);
      
      console.log(`üßπ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä –∑–∞–ø—É—â–µ–Ω–∞`);
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä –≤ —Å—Ç–∞—Ç—É—Å–µ WAITING –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async cleanupUserWaitingGames(userId, userName) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç—É—Å–µ WAITING
      const waitingGames = await prisma.game.findMany({
        where: {
          player1Id: userId,
          status: 'WAITING'
        }
      });

      if (waitingGames.length > 0) {
        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await prisma.game.deleteMany({
          where: {
            player1Id: userId,
            status: 'WAITING'
          }
        });

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—ã –∏–∑ –ø–∞–º—è—Ç–∏
        waitingGames.forEach(game => {
          this.games.delete(game.code);
        });

        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${waitingGames.length} WAITING –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä:', error);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
  async cleanupOldGames() {
    try {
      const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000);
      
      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ WAITING
      const oldGames = await prisma.game.findMany({
        where: {
          status: 'WAITING',
          createdAt: {
            lt: tenMinutesAgo
          }
        }
      });

      if (oldGames.length > 0) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã
        await prisma.game.deleteMany({
          where: {
            status: 'WAITING',
            createdAt: {
              lt: tenMinutesAgo
            }
          }
        });

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
        oldGames.forEach(game => {
          this.games.delete(game.code);
        });

        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${oldGames.length} —Å—Ç–∞—Ä—ã—Ö WAITING –∏–≥—Ä (>10 –º–∏–Ω—É—Ç)`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ heartbeat –∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  async checkHeartbeats() {
    const now = Date.now();
    const timeout = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã

    for (const [userId, socket] of this.userSockets.entries()) {
      if (now - socket.lastHeartbeat > timeout) {
        console.log(`üíî Heartbeat timeout –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.userName}`);
        
        // –û—á–∏—â–∞–µ–º –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.cleanupUserWaitingGames(userId, socket.userName);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç
        socket.disconnect();
        this.userSockets.delete(userId);
      }
    }
  }
}

module.exports = GameServer;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const gameServer = new GameServer();
  const port = process.env.WEBSOCKET_PORT || 3001;
  gameServer.start(port);
} 