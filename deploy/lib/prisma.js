// Import environment setup first
require('./env');

const { PrismaClient } = require('../app/generated/prisma');

const globalForPrisma = globalThis;

// –°–æ–∑–¥–∞–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
const prisma = globalForPrisma.prisma ?? new PrismaClient({
  log: ['error']
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
if (!globalForPrisma.dbInitialized) {
  setTimeout(async () => {
    try {
      await initializeDatabase();
      globalForPrisma.dbInitialized = true;
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }, 1000);
}

async function initializeDatabase() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const userCount = await prisma.user.count();
    
    if (userCount === 0) {
      console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await prisma.user.createMany({
        data: [
          {
            id: 'test1',
            email: 'test1@example.com',
            name: 'Test User 1',
            password: 'password123'
          },
          {
            id: 'test2',
            email: 'test2@example.com',
            name: 'Test User 2',
            password: 'password123'
          },
          {
            id: 'admin',
            email: 'admin@example.com',
            name: 'Admin',
            password: 'admin123'
          }
        ]
      });
      
      console.log('üë• –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const gameCount = await prisma.game.count();
    
    if (gameCount === 0) {
      console.log('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–≥—Ä...');
      
      await prisma.game.createMany({
        data: [
          {
            id: 'game1',
            code: 'GAME1',
            player1Id: 'test1'
          },
          {
            id: 'game2',
            code: 'GAME2',
            player1Id: 'test2'
          },
          {
            id: 'game3',
            code: 'GAME3',
            player1Id: 'admin'
          }
        ]
      });
      
      console.log('üéÆ –¢–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');
    }
    
    console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${await prisma.user.count()}`);
    console.log(`üéÆ –ò–≥—Ä –≤ –±–∞–∑–µ: ${await prisma.game.count()}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;

module.exports = { prisma, initializeDatabase }; 