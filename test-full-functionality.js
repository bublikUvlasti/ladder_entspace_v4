const { io } = require('socket.io-client');
const http = require('http');
const { PrismaClient } = require('./app/generated/prisma');

const prisma = new PrismaClient();

console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n');

class GameTester {
    constructor() {
        this.testResults = [];
        this.testUserId = null;
    }

    async init() {
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const testUser = await prisma.user.findUnique({
            where: { email: 'test@example.com' }
        });
        
        if (testUser) {
            this.testUserId = testUser.id;
            console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUser.name} (${testUser.id})\n`);
        } else {
            throw new Error('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ create-test-user.js');
        }
    }

    async test(name, testFn) {
        console.log(`üîç –¢–µ—Å—Ç: ${name}`);
        try {
            await testFn();
            console.log(`‚úÖ ${name} - –ü–†–û–ô–î–ï–ù\n`);
            this.testResults.push({ name, status: 'PASS' });
        } catch (error) {
            console.log(`‚ùå ${name} - –ü–†–û–í–ê–õ–ï–ù: ${error.message}\n`);
            this.testResults.push({ name, status: 'FAIL', error: error.message });
        }
    }

    async testHttpServer() {
        return new Promise((resolve, reject) => {
            const req = http.get('http://localhost:3000', (res) => {
                if (res.statusCode === 200) {
                    resolve();
                } else {
                    reject(new Error(`HTTP —Å—Ç–∞—Ç—É—Å: ${res.statusCode}`));
                }
            });
            req.on('error', reject);
            req.setTimeout(5000, () => {
                req.destroy();
                reject(new Error('–¢–∞–π–º–∞—É—Ç HTTP –∑–∞–ø—Ä–æ—Å–∞'));
            });
        });
    }

    async testWebSocketConnection() {
        return new Promise((resolve, reject) => {
            const socket = io('http://localhost:3001', {
                transports: ['websocket', 'polling'],
                timeout: 5000
            });

            const timeout = setTimeout(() => {
                socket.close();
                reject(new Error('–¢–∞–π–º–∞—É—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
            }, 5000);

            socket.on('connect', () => {
                clearTimeout(timeout);
                console.log(`   Socket ID: ${socket.id}`);
                socket.close();
                resolve();
            });

            socket.on('connect_error', (err) => {
                clearTimeout(timeout);
                reject(new Error(`WebSocket –æ—à–∏–±–∫–∞: ${err.message}`));
            });
        });
    }

    async testAuthentication() {
        return new Promise((resolve, reject) => {
            const socket = io('http://localhost:3001', {
                transports: ['websocket', 'polling'],
                timeout: 5000
            });

            let authenticated = false;
            const timeout = setTimeout(() => {
                socket.close();
                if (!authenticated) {
                    reject(new Error('–¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
                }
            }, 10000);

            socket.on('connect', () => {
                console.log('   –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
                socket.emit('authenticate', { userId: this.testUserId });
            });

            socket.on('authenticated', (data) => {
                clearTimeout(timeout);
                authenticated = true;
                console.log(`   –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: ${data.user.name}`);
                socket.close();
                resolve();
            });

            socket.on('error', (error) => {
                clearTimeout(timeout);
                socket.close();
                reject(new Error(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message || 'Unknown error'}`));
            });

            socket.on('connect_error', (err) => {
                clearTimeout(timeout);
                reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`));
            });
        });
    }

    async testGameCreation() {
        return new Promise((resolve, reject) => {
            const socket = io('http://localhost:3001', {
                transports: ['websocket', 'polling'],
                timeout: 5000
            });

            let gameCreated = false;
            const timeout = setTimeout(() => {
                socket.close();
                if (!gameCreated) {
                    reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã'));
                }
            }, 15000);

            socket.on('connect', () => {
                console.log('   –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...');
                socket.emit('authenticate', { userId: this.testUserId });
            });

            socket.on('authenticated', () => {
                console.log('   –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...');
                socket.emit('createGame');
            });

            socket.on('gameCreated', (data) => {
                clearTimeout(timeout);
                gameCreated = true;
                console.log(`   –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –∫–æ–¥–æ–º: ${data.code}`);
                socket.close();
                resolve();
            });

            socket.on('error', (error) => {
                clearTimeout(timeout);
                socket.close();
                reject(new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã: ${error.message || 'Unknown error'}`));
            });

            socket.on('connect_error', (err) => {
                clearTimeout(timeout);
                reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err.message}`));
            });
        });
    }

    async testApiEndpoints() {
        const endpoints = [
            '/api/auth/session',
            '/api/game/available'
        ];

        for (const endpoint of endpoints) {
            await new Promise((resolve, reject) => {
                const req = http.get(`http://localhost:3000${endpoint}`, (res) => {
                    console.log(`   ${endpoint}: ${res.statusCode}`);
                    if (res.statusCode < 500) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫—Ä–æ–º–µ 5xx
                        resolve();
                    } else {
                        reject(new Error(`–°—Ç–∞—Ç—É—Å ${res.statusCode} –¥–ª—è ${endpoint}`));
                    }
                });
                req.on('error', reject);
                req.setTimeout(5000, () => {
                    req.destroy();
                    reject(new Error(`–¢–∞–π–º–∞—É—Ç –¥–ª—è ${endpoint}`));
                });
            });
        }
    }

    async runAllTests() {
        await this.init();
        
        await this.test('HTTP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', () => this.testHttpServer());
        await this.test('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', () => this.testWebSocketConnection());
        await this.test('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => this.testAuthentication());
        await this.test('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã', () => this.testGameCreation());
        await this.test('API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã', () => this.testApiEndpoints());

        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('='.repeat(50));
        
        let passed = 0;
        let failed = 0;
        
        this.testResults.forEach(result => {
            const status = result.status === 'PASS' ? '‚úÖ' : '‚ùå';
            console.log(`${status} ${result.name}`);
            if (result.error) {
                console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
            }
            
            if (result.status === 'PASS') passed++;
            else failed++;
        });
        
        console.log('='.repeat(50));
        console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}, –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
        
        if (failed === 0) {
            console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        } else {
            console.log('‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.');
        }
        
        await prisma.$disconnect();
    }
}

const tester = new GameTester();
tester.runAllTests().catch(console.error); 