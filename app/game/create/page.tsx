'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
// import { motion } from 'framer-motion';
import { useSocketContext } from '../../../lib/socket-context';

export default function CreateGame() {
  const { data: session } = useSession();
  const router = useRouter();
  const { createGame, currentGame, connected, setCurrentGame } = useSocketContext();
  const [isCreating, setIsCreating] = useState(false);

  useEffect(() => {
    console.log('üéÆ CreateGame useEffect - currentGame changed:', currentGame);
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
    if (currentGame && currentGame.code && currentGame.status !== 'FINISHED') {
      console.log('üéÆ Redirecting to active game:', currentGame.code);
      setIsCreating(false);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º replace –≤–º–µ—Å—Ç–æ push –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
      router.replace(`/game/${currentGame.code}`);
    }
  }, [currentGame, router]);

  const handleCreateGame = async () => {
    console.log('üéÆ handleCreateGame called');
    console.log('üéÆ Connected:', connected);
    console.log('üéÆ isCreating:', isCreating);
    
    if (!connected || isCreating) {
      console.log('‚ùå Cannot create game - not connected or already creating');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π
    if (currentGame && currentGame.status === 'FINISHED') {
      console.log('üßπ Clearing finished game state before creating new game');
      setCurrentGame(null);
    }
    
    setIsCreating(true);
    console.log('üéÆ Set isCreating to true');
    
    try {
      console.log('üéÆ Calling createGame...');
      createGame();
      console.log('üéÆ createGame called successfully');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º
      setTimeout(() => {
        console.log('üéÆ Timeout reached, checking if still creating...');
        if (isCreating && !currentGame) {
          console.log('‚ùå Game creation timeout - resetting state');
          setIsCreating(false);
        }
      }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
      setIsCreating(false);
    }
  };

  if (!session) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-800 to-black text-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
          <button
            onClick={() => router.push('/auth/login')}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            –í–æ–π—Ç–∏
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-800 to-black text-white flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-white bg-clip-text text-transparent">
            –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã
          </h1>
          <p className="text-gray-400">
            –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
          </p>
        </div>

        <div className="bg-slate-800/40 border border-slate-600/30 rounded-xl p-6 backdrop-blur-sm space-y-6">
          {/* Game Info */}
          <div className="text-center">
            <h3 className="text-xl font-semibold mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã</h3>
            <div className="space-y-2 text-sm text-gray-400">
              <p>‚Ä¢ –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 50 –∫–∞–º–µ—à–∫–æ–≤</p>
              <p>‚Ä¢ –ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –æ—Ç 1 –¥–æ 48 –∫–∞–º–µ—à–∫–æ–≤ –∑–∞ —Ö–æ–¥</p>
              <p>‚Ä¢ –ü–æ–±–µ–¥–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –±–æ–ª—å—à–∏–º –∫–∞–º–Ω–µ–º –∫—Ä–∞—è (-2 –∏–ª–∏ +2)</p>
            </div>
          </div>

          {/* Create Button */}
          <button
            onClick={handleCreateGame}
            disabled={!connected || isCreating}
            className={`w-full py-4 px-6 rounded-xl font-semibold text-lg shadow-lg transition-all duration-300 border ${
              connected && !isCreating
                ? 'bg-gradient-to-r from-blue-600 to-blue-800 text-white hover:shadow-blue-500/25 border-blue-500/30 hover:scale-105' 
                : 'bg-gray-600 text-gray-400 border-gray-500/30 cursor-not-allowed'
            }`}
          >
            {isCreating ? (
              <div className="flex items-center justify-center">
                <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã...
              </div>
            ) : (
              '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'
            )}
          </button>

          {/* Connection Status */}
          <div className="text-center">
            <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm ${
              connected ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'
            }`}>
              <div className={`w-2 h-2 rounded-full mr-2 ${
                connected ? 'bg-green-400' : 'bg-red-400'
              }`} />
              {connected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É' : '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞'}
            </div>
          </div>

          {/* Back Button */}
          <button
            onClick={() => router.push('/')}
            className="w-full py-3 text-gray-400 hover:text-gray-300 transition-colors text-center border border-gray-600/30 rounded-xl hover:bg-gray-800/20"
          >
            –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    </div>
  );
} 