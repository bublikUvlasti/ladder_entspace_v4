import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '../../../generated/prisma';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ API –∫–ª—é—á—É (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    const apiKey = request.headers.get('x-api-key');
    const validApiKey = process.env.ADMIN_API_KEY;
    
    if (!apiKey || !validApiKey || apiKey !== validApiKey) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        wins: true,
        losses: true,
        createdAt: true,
        updatedAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    const processedUsers = users.map(user => {
      const totalGames = (user.wins || 0) + (user.losses || 0);
      const winRate = totalGames > 0 ? Math.round(((user.wins || 0) / totalGames) * 100) : 0;
      
      return {
        'ID': user.id,
        '–ò–º—è': user.name || '',
        'Email': user.email,
        '–ü–æ–±–µ–¥': user.wins || 0,
        '–ü–æ—Ä–∞–∂–µ–Ω–∏–π': user.losses || 0,
        '–í—Å–µ–≥–æ –∏–≥—Ä': totalGames,
        '–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥': winRate,
        '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': user.createdAt.toISOString().split('T')[0],
        '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': user.updatedAt.toISOString().split('T')[0]
      };
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
    console.log(`üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${processedUsers.length} –∑–∞–ø–∏—Å–µ–π`);

    return NextResponse.json({
      success: true,
      total: processedUsers.length,
      users: processedUsers,
      exportDate: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return NextResponse.json(
      { error: 'Failed to export users' },
      { status: 500 }
    );
  }
} 