const http = require('http');
const { io } = require('socket.io-client');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
function checkHttpServer() {
    return new Promise((resolve) => {
        const req = http.get('http://localhost:3000', (res) => {
            console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3000): –†–ê–ë–û–¢–ê–ï–¢');
            console.log(`   –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
            resolve(true);
        });
        
        req.on('error', (err) => {
            console.log('‚ùå HTTP —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3000): –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
            console.log(`   –û—à–∏–±–∫–∞: ${err.message}`);
            resolve(false);
        });
        
        req.setTimeout(5000, () => {
            console.log('‚ùå HTTP —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3000): –¢–ê–ô–ú–ê–£–¢');
            req.destroy();
            resolve(false);
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
function checkWebSocketServer() {
    return new Promise((resolve) => {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É...');
        
        const socket = io('http://localhost:3001', {
            transports: ['websocket', 'polling'],
            timeout: 5000
        });
        
        const timeout = setTimeout(() => {
            console.log('‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3001): –¢–ê–ô–ú–ê–£–¢');
            socket.close();
            resolve(false);
        }, 5000);
        
        socket.on('connect', () => {
            clearTimeout(timeout);
            console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3001): –†–ê–ë–û–¢–ê–ï–¢');
            console.log(`   Socket ID: ${socket.id}`);
            socket.close();
            resolve(true);
        });
        
        socket.on('connect_error', (err) => {
            clearTimeout(timeout);
            console.log('‚ùå WebSocket —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 3001): –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
            console.log(`   –û—à–∏–±–∫–∞: ${err.message}`);
            resolve(false);
        });
    });
}

async function main() {
    const httpOk = await checkHttpServer();
    console.log('');
    const wsOk = await checkWebSocketServer();
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log(`HTTP —Å–µ—Ä–≤–µ—Ä: ${httpOk ? '‚úÖ OK' : '‚ùå FAIL'}`);
    console.log(`WebSocket —Å–µ—Ä–≤–µ—Ä: ${wsOk ? '‚úÖ OK' : '‚ùå FAIL'}`);
    
    if (httpOk && wsOk) {
        console.log('\nüéâ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
        console.log('\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏');
    }
    
    process.exit(0);
}

main().catch(console.error); 