const { Client } = require('pg');

async function tryConnection(config, description) {
  const client = new Client(config);

  try {
    await client.connect();
    console.log(`‚úÖ ${description}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const result = await client.query(
      "SELECT 1 FROM pg_database WHERE datname = 'ladder_entspace'"
    );

    if (result.rows.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await client.query('CREATE DATABASE ladder_entspace');
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ladder_entspace —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ladder_entspace —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    await client.end();
    return true;

  } catch (error) {
    console.error(`‚ùå ${description}: ${error.message}`);
    try {
      await client.end();
    } catch (e) {}
    return false;
  }
}

async function createDatabase() {
  const configs = [
    {
      config: {
        user: 'postgres',
        password: 'postgres',
        host: 'localhost',
        port: 5432,
        database: 'postgres'
      },
      description: 'localhost —Å –ø–∞—Ä–æ–ª–µ–º'
    },
    {
      config: {
        user: 'postgres',
        host: 'localhost', 
        port: 5432,
        database: 'postgres'
      },
      description: 'localhost –±–µ–∑ –ø–∞—Ä–æ–ª—è'
    },
    {
      config: {
        user: 'postgres',
        password: 'postgres',
        host: '127.0.0.1',
        port: 5432,
        database: 'postgres'
      },
      description: '127.0.0.1 —Å –ø–∞—Ä–æ–ª–µ–º'
    },
    {
      config: {
        user: 'postgres',
        host: '127.0.0.1',
        port: 5432,
        database: 'postgres'
      },
      description: '127.0.0.1 –±–µ–∑ –ø–∞—Ä–æ–ª—è'
    }
  ];

  for (const { config, description } of configs) {
    const success = await tryConnection(config, description);
    if (success) {
      console.log('üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!');
      return;
    }
  }

  console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
}

createDatabase(); 